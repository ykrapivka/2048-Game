{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.board = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = `idle`;\n    }\n    arraysEqual(arr1, arr2) {\n        return JSON.stringify(arr1) === JSON.stringify(arr2);\n    }\n    turnBoard(direction) {\n        const size = this.board.length;\n        const newBoard = Array.from({\n            length: size\n        }, ()=>Array(size).fill(0));\n        if (direction === \"forward\") {\n            for(let i = 0; i < size; i++)for(let n = 0; n < size; n++)newBoard[n][size - 1 - i] = this.board[i][n];\n            this.board = newBoard;\n        } else if (direction === \"back\") {\n            for(let i = 0; i < size; i++)for(let n = 0; n < size; n++)newBoard[size - 1 - n][i] = this.board[i][n];\n            this.board = newBoard;\n        }\n    }\n    compressRow(direction) {\n        if (this.getStatus() === `idle` || this.getStatus() === `win`) return;\n        let moved = false;\n        if (direction === \"up\" || direction === \"down\") this.turnBoard(\"forward\");\n        this.board.forEach((row, index)=>{\n            const originalRow = [\n                ...row\n            ];\n            const rowValuesOnly = row.filter((cell)=>cell > 0);\n            const compressedRow = [];\n            if (direction === \"left\" || direction === \"down\") rowValuesOnly.reverse();\n            for(let i = rowValuesOnly.length - 1; i >= 0; i--)if (rowValuesOnly[i] === rowValuesOnly[i - 1] && i > 0) {\n                compressedRow.unshift(rowValuesOnly[i] * 2);\n                this.score += rowValuesOnly[i] * 2;\n                if (rowValuesOnly[i] * 2 === 2048) this.status = \"win\";\n                i--;\n                moved = true;\n            } else compressedRow.unshift(rowValuesOnly[i]);\n            while(compressedRow.length < 4)compressedRow.unshift(0);\n            if (direction === \"left\" || direction === \"down\") compressedRow.reverse();\n            if (!this.arraysEqual(originalRow, compressedRow)) moved = true;\n            this.board[index] = compressedRow;\n        });\n        if (direction === \"up\" || direction === \"down\") this.turnBoard(\"back\");\n        if (moved) {\n            const [row1, column1] = this.randomCell();\n            this.board[row1][column1] = this.pickRandomNumber();\n        }\n        if (!this.canMove()) this.status = \"lose\";\n    }\n    randomCell() {\n        let cellRow = Math.floor(Math.random() * 4);\n        let cellColumn = Math.floor(Math.random() * 4);\n        while(this.board[cellRow][cellColumn] !== 0){\n            cellRow = Math.floor(Math.random() * 4);\n            cellColumn = Math.floor(Math.random() * 4);\n        }\n        return [\n            cellRow,\n            cellColumn\n        ];\n    }\n    pickRandomNumber() {\n        const random = Math.random();\n        if (random < 0.1) return 4;\n        else return 2;\n    }\n    canMove() {\n        for(let i = 0; i < 4; i++)for(let n = 0; n < 4; n++){\n            if (this.board[i][n] === 0) return true;\n            if (n < 3 && this.board[i][n] === this.board[i][n + 1]) return true;\n            if (i < 3 && this.board[i][n] === this.board[i + 1][n]) return true;\n        }\n        return false;\n    }\n    moveLeft() {\n        this.compressRow(\"left\");\n    }\n    moveRight() {\n        this.compressRow(\"right\");\n    }\n    moveUp() {\n        this.compressRow(\"up\");\n    }\n    moveDown() {\n        this.compressRow(\"down\");\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = `playing`;\n        const [row1, column1] = this.randomCell();\n        let [row2, column2] = this.randomCell();\n        while(row1 === row2 && column1 === column2)[row2, column2] = this.randomCell();\n        this.board[row1][column1] = this.pickRandomNumber();\n        this.board[row2][column2] = this.pickRandomNumber();\n    }\n    restart() {\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = `idle`;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\"tbody\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$rows = $09e991522ca7e64e$var$gameField.querySelectorAll(\"tr\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\"td\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$styleCell(cell) {\n    cell.classList.add(`field-cell--${cell.textContent}`);\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n}\nfunction $09e991522ca7e64e$var$clearCell(cell) {\n    if (cell.classList.contains(`field-cell--${cell.textContent}`)) cell.classList.remove(`field-cell--${cell.textContent}`);\n    cell.textContent = \"\";\n}\nfunction $09e991522ca7e64e$var$updateBoard() {\n    for(let i = 0; i < $09e991522ca7e64e$var$game.board.length; i++){\n        const cellsInRow = $09e991522ca7e64e$var$rows[i].querySelectorAll(\"td\");\n        for(let n = 0; n < $09e991522ca7e64e$var$game.board[i].length; n++)if ($09e991522ca7e64e$var$game.board[i][n] !== 0) {\n            $09e991522ca7e64e$var$clearCell(cellsInRow[n]);\n            cellsInRow[n].textContent = $09e991522ca7e64e$var$game.board[i][n];\n            $09e991522ca7e64e$var$styleCell(cellsInRow[n]);\n        } else $09e991522ca7e64e$var$clearCell(cellsInRow[n]);\n        $09e991522ca7e64e$var$updateScore();\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$button.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$cells.forEach((cell)=>{\n            $09e991522ca7e64e$var$clearCell(cell);\n        });\n    }\n});\nwindow.addEventListener(\"keydown\", (ev)=>{\n    ev.preventDefault();\n    switch(ev.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$updateBoard();\n});\n\n\n//# sourceMappingURL=index.7740fc8a.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameField = document.querySelector('tbody');\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('button');\nconst rows = gameField.querySelectorAll('tr');\nconst cells = document.querySelectorAll('td');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction styleCell(cell) {\n  cell.classList.add(`field-cell--${cell.textContent}`);\n}\n\nfunction updateScore() {\n  score.textContent = game.score;\n}\n\nfunction clearCell(cell) {\n  if (cell.classList.contains(`field-cell--${cell.textContent}`)) {\n    cell.classList.remove(`field-cell--${cell.textContent}`);\n  }\n  cell.textContent = '';\n}\n\nfunction updateBoard() {\n  for (let i = 0; i < game.board.length; i++) {\n    const cellsInRow = rows[i].querySelectorAll('td');\n\n    for (let n = 0; n < game.board[i].length; n++) {\n      if (game.board[i][n] !== 0) {\n        clearCell(cellsInRow[n]);\n        cellsInRow[n].textContent = game.board[i][n];\n        styleCell(cellsInRow[n]);\n      } else {\n        clearCell(cellsInRow[n]);\n      }\n    }\n\n    updateScore();\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    game.start();\n    updateBoard();\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n    messageStart.classList.add('hidden');\n  } else if (button.textContent === 'Restart') {\n    game.restart();\n    updateBoard();\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n\n    cells.forEach((cell) => {\n      clearCell(cell);\n    });\n  }\n});\n\nwindow.addEventListener('keydown', (ev) => {\n  ev.preventDefault();\n\n  switch (ev.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  updateBoard();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState.map((row) => [...row]);\n    this.board = initialState.map((row) => [...row]);\n\n    this.score = 0;\n    this.status = `idle`;\n  }\n\n  arraysEqual(arr1, arr2) {\n    return JSON.stringify(arr1) === JSON.stringify(arr2);\n  }\n\n  turnBoard(direction) {\n    const size = this.board.length;\n    const newBoard = Array.from({ length: size }, () => Array(size).fill(0));\n\n    if (direction === 'forward') {\n      for (let i = 0; i < size; i++) {\n        for (let n = 0; n < size; n++) {\n          newBoard[n][size - 1 - i] = this.board[i][n];\n        }\n      }\n\n      this.board = newBoard;\n    } else if (direction === 'back') {\n      for (let i = 0; i < size; i++) {\n        for (let n = 0; n < size; n++) {\n          newBoard[size - 1 - n][i] = this.board[i][n];\n        }\n      }\n\n      this.board = newBoard;\n    }\n  }\n\n  compressRow(direction) {\n    if (this.getStatus() === `idle` || this.getStatus() === `win`) {\n      return;\n    }\n\n    let moved = false;\n\n    if (direction === 'up' || direction === 'down') {\n      this.turnBoard('forward');\n    }\n\n    this.board.forEach((row, index) => {\n      const originalRow = [...row];\n      const rowValuesOnly = row.filter((cell) => cell > 0);\n      const compressedRow = [];\n\n      if (direction === 'left' || direction === 'down') {\n        rowValuesOnly.reverse();\n      }\n\n      for (let i = rowValuesOnly.length - 1; i >= 0; i--) {\n        if (rowValuesOnly[i] === rowValuesOnly[i - 1] && i > 0) {\n          compressedRow.unshift(rowValuesOnly[i] * 2);\n          this.score += rowValuesOnly[i] * 2;\n\n          if (rowValuesOnly[i] * 2 === 2048) {\n            this.status = 'win';\n          }\n          i--;\n          moved = true;\n        } else {\n          compressedRow.unshift(rowValuesOnly[i]);\n        }\n      }\n\n      while (compressedRow.length < 4) {\n        compressedRow.unshift(0);\n      }\n\n      if (direction === 'left' || direction === 'down') {\n        compressedRow.reverse();\n      }\n\n      if (!this.arraysEqual(originalRow, compressedRow)) {\n        moved = true;\n      }\n\n      this.board[index] = compressedRow;\n    });\n\n    if (direction === 'up' || direction === 'down') {\n      this.turnBoard('back');\n    }\n\n    if (moved) {\n      const [row1, column1] = this.randomCell();\n\n      this.board[row1][column1] = this.pickRandomNumber();\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  randomCell() {\n    let cellRow = Math.floor(Math.random() * 4);\n    let cellColumn = Math.floor(Math.random() * 4);\n\n    while (this.board[cellRow][cellColumn] !== 0) {\n      cellRow = Math.floor(Math.random() * 4);\n      cellColumn = Math.floor(Math.random() * 4);\n    }\n\n    return [cellRow, cellColumn];\n  }\n\n  pickRandomNumber() {\n    const random = Math.random();\n\n    if (random < 0.1) {\n      return 4;\n    } else {\n      return 2;\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let n = 0; n < 4; n++) {\n        if (this.board[i][n] === 0) {\n          return true;\n        }\n\n        if (n < 3 && this.board[i][n] === this.board[i][n + 1]) {\n          return true;\n        }\n\n        if (i < 3 && this.board[i][n] === this.board[i + 1][n]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    this.compressRow('left');\n  }\n\n  moveRight() {\n    this.compressRow('right');\n  }\n\n  moveUp() {\n    this.compressRow('up');\n  }\n  moveDown() {\n    this.compressRow('down');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = `playing`;\n\n    const [row1, column1] = this.randomCell();\n    let [row2, column2] = this.randomCell();\n\n    while (row1 === row2 && column1 === column2) {\n      [row2, column2] = this.randomCell();\n    }\n\n    this.board[row1][column1] = this.pickRandomNumber();\n    this.board[row2][column2] = this.pickRandomNumber();\n  }\n\n  restart() {\n    this.board = this.initialState.map((row) => [...row]);\n\n    this.score = 0;\n    this.status = `idle`;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","map","row","board","score","status","arraysEqual","arr1","arr2","JSON","stringify","turnBoard","direction","size","length","newBoard","Array","from","fill","i","n","compressRow","getStatus","moved","forEach","index","originalRow","rowValuesOnly","filter","cell","compressedRow","reverse","unshift","row1","column1","randomCell","pickRandomNumber","canMove","cellRow","Math","floor","random","cellColumn","moveLeft","moveRight","moveUp","moveDown","getScore","getState","start","row2","column2","restart","$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$rows","querySelectorAll","$09e991522ca7e64e$var$cells","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$clearCell","classList","contains","textContent","remove","$09e991522ca7e64e$var$updateBoard","cellsInRow","$09e991522ca7e64e$var$styleCell","add","addEventListener","window","ev","preventDefault","key"],"version":3,"file":"index.7740fc8a.js.map"}